{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/History.jsx","components/StatusMessage.jsx","App.js","helpers.jsx","reportWebVitals.js","index.js"],"names":["Square","value","onClick","isWinningSquare","type","className","Board","board","handleSquareClick","winningSquares","renderSquare","position","includes","History","history","moveTo","currentMove","map","_","move","StatusMessage","winner","current","noMovesLeft","every","el","isXNext","NEW_GAME","Array","fill","App","useState","setHistory","setCurrentMove","squares","lines","i","length","a","b","c","calculateWinner","prev","last","newBoard","square","pos","concat","style","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3754c838.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = ({ value, onClick, isWinningSquare }) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={onClick}\r\n      className={`square ${isWinningSquare ? 'winning' : ''} ${\r\n        value === 'X' ? 'text-green' : 'text-orange'\r\n      }`}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nconst Board = ({ board, handleSquareClick, winningSquares }) => {\r\n  const renderSquare = position => {\r\n    const isWinningSquare = winningSquares.includes(position);\r\n\r\n    return (\r\n      <Square\r\n        value={board[position]}\r\n        onClick={() => handleSquareClick(position)}\r\n        isWinningSquare={isWinningSquare}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\r\n\r\nconst History = ({ history, moveTo, currentMove }) => {\r\n  return (\r\n    <div className=\"history-wrapper\">\r\n      <ul className=\"history\">\r\n        {history.map((_, move) => {\r\n          return (\r\n            <li key={move}>\r\n              <button\r\n                className={`btn-move ${move === currentMove ? 'active' : ''}`}\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  moveTo(move);\r\n                }}\r\n              >\r\n                {move === 0 ? 'Go to game start' : `Go to move #${move}`}\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n","import React from 'react';\r\n\r\nconst StatusMessage = ({ winner, current }) => {\r\n  const noMovesLeft = current.board.every(el => el !== null);\r\n\r\n  return (\r\n    <div className=\"status-message\">\r\n      {winner && (\r\n        <>\r\n          Winner is{' '}\r\n          <span className={winner === 'X' ? 'text-green' : 'text-orange'}>\r\n            {winner}\r\n          </span>\r\n        </>\r\n      )}\r\n      {!winner && !noMovesLeft && (\r\n        <>\r\n          Next player is{' '}\r\n          <span className={current.isXNext ? 'text-green' : 'text-orange'}>\r\n            {current.isXNext ? 'X' : 'O'}{' '}\r\n          </span>\r\n        </>\r\n      )}\r\n      {!winner && noMovesLeft && (\r\n        <>\r\n          <span className=\"text-green\">X</span> and{' '}\r\n          <span className=\"text-orange\">O</span> tied\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatusMessage;\r\n","import React, { useState } from 'react';\nimport Board from './components/Board';\nimport History from './components/History';\nimport StatusMessage from './components/StatusMessage';\nimport { calculateWinner } from './helpers';\n\nimport './styles/root.scss';\n\nconst NEW_GAME = [{ board: Array(9).fill(null), isXNext: true }];\n\nconst App = () => {\n  const [history, setHistory] = useState(NEW_GAME);\n  const [currentMove, setCurrentMove] = useState(0);\n  const current = history[currentMove];\n\n  const { winner, winningSquares } = calculateWinner(current.board);\n\n  const handleSquareClick = position => {\n    if (current.board[position] || winner) {\n      return;\n    }\n\n    setHistory(prev => {\n      const last = prev[prev.length - 1];\n\n      const newBoard = last.board.map((square, pos) => {\n        if (pos === position) {\n          return last.isXNext ? 'X' : 'O';\n        }\n\n        return square;\n      });\n\n      return prev.concat({ board: newBoard, isXNext: !last.isXNext });\n    });\n\n    setCurrentMove(prev => prev + 1);\n  };\n\n  const moveTo = move => {\n    setCurrentMove(move);\n  };\n\n  const onNewGame = () => {\n    setHistory(NEW_GAME);\n    setCurrentMove(0);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>\n        TIC <span className=\"text-green\">TAC</span> TOE\n      </h1>\n      <StatusMessage winner={winner} current={current} />\n      <Board\n        board={current.board}\n        handleSquareClick={handleSquareClick}\n        winningSquares={winningSquares}\n      />\n      <button\n        type=\"button\"\n        onClick={onNewGame}\n        className={`btn-reset ${winner ? 'active' : ''}`}\n      >\n        Start new game\n      </button>\n      <h2 style={{ fontWeight: 'normal' }}>Current game history</h2>\n      <History history={history} moveTo={moveTo} currentMove={currentMove} />\n      <div className=\"bg-balls\" />\n    </div>\n  );\n};\n\nexport default App;\n","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        winner: squares[a],\r\n        winningSquares: [a, b, c],\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    winner: null,\r\n    winningSquares: [],\r\n  };\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}